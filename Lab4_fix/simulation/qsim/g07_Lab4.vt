// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2017 21:21:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g07_testing
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g07_testing_vlg_sample_tst(
	new_card,
	old_sum,
	sampler_tx
);
input [5:0] new_card;
input [5:0] old_sum;
output sampler_tx;

reg sample;
time current_time;
always @(new_card or old_sum)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g07_testing_vlg_check_tst (
	legal_play,
	new_sum,
	sampler_rx
);
input  legal_play;
input [5:0] new_sum;
input sampler_rx;

reg  legal_play_expected;
reg [5:0] new_sum_expected;

reg  legal_play_prev;
reg [5:0] new_sum_prev;

reg  legal_play_expected_prev;
reg [5:0] new_sum_expected_prev;

reg  last_legal_play_exp;
reg [5:0] last_new_sum_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	legal_play_prev = legal_play;
	new_sum_prev = new_sum;
end

// update expected /o prevs

always @(trigger)
begin
	legal_play_expected_prev = legal_play_expected;
	new_sum_expected_prev = new_sum_expected;
end


// expected new_sum[ 5 ]
initial
begin
	new_sum_expected[5] = 1'bX;
end 
// expected new_sum[ 4 ]
initial
begin
	new_sum_expected[4] = 1'bX;
end 
// expected new_sum[ 3 ]
initial
begin
	new_sum_expected[3] = 1'bX;
end 
// expected new_sum[ 2 ]
initial
begin
	new_sum_expected[2] = 1'bX;
end 
// expected new_sum[ 1 ]
initial
begin
	new_sum_expected[1] = 1'bX;
end 
// expected new_sum[ 0 ]
initial
begin
	new_sum_expected[0] = 1'bX;
end 

// expected legal_play
initial
begin
	legal_play_expected = 1'bX;
	legal_play_expected = #999000 1'b0;
end 
// generate trigger
always @(legal_play_expected or legal_play or new_sum_expected or new_sum)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected legal_play = %b | expected new_sum = %b | ",legal_play_expected_prev,new_sum_expected_prev);
	$display("| real legal_play = %b | real new_sum = %b | ",legal_play_prev,new_sum_prev);
`endif
	if (
		( legal_play_expected_prev !== 1'bx ) && ( legal_play_prev !== legal_play_expected_prev )
		&& ((legal_play_expected_prev !== last_legal_play_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port legal_play :: @time = %t",  $realtime);
		$display ("     Expected value = %b", legal_play_expected_prev);
		$display ("     Real value = %b", legal_play_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_legal_play_exp = legal_play_expected_prev;
	end
	if (
		( new_sum_expected_prev[0] !== 1'bx ) && ( new_sum_prev[0] !== new_sum_expected_prev[0] )
		&& ((new_sum_expected_prev[0] !== last_new_sum_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_sum_expected_prev);
		$display ("     Real value = %b", new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_new_sum_exp[0] = new_sum_expected_prev[0];
	end
	if (
		( new_sum_expected_prev[1] !== 1'bx ) && ( new_sum_prev[1] !== new_sum_expected_prev[1] )
		&& ((new_sum_expected_prev[1] !== last_new_sum_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_sum_expected_prev);
		$display ("     Real value = %b", new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_new_sum_exp[1] = new_sum_expected_prev[1];
	end
	if (
		( new_sum_expected_prev[2] !== 1'bx ) && ( new_sum_prev[2] !== new_sum_expected_prev[2] )
		&& ((new_sum_expected_prev[2] !== last_new_sum_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_sum_expected_prev);
		$display ("     Real value = %b", new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_new_sum_exp[2] = new_sum_expected_prev[2];
	end
	if (
		( new_sum_expected_prev[3] !== 1'bx ) && ( new_sum_prev[3] !== new_sum_expected_prev[3] )
		&& ((new_sum_expected_prev[3] !== last_new_sum_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_sum_expected_prev);
		$display ("     Real value = %b", new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_new_sum_exp[3] = new_sum_expected_prev[3];
	end
	if (
		( new_sum_expected_prev[4] !== 1'bx ) && ( new_sum_prev[4] !== new_sum_expected_prev[4] )
		&& ((new_sum_expected_prev[4] !== last_new_sum_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_sum_expected_prev);
		$display ("     Real value = %b", new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_new_sum_exp[4] = new_sum_expected_prev[4];
	end
	if (
		( new_sum_expected_prev[5] !== 1'bx ) && ( new_sum_prev[5] !== new_sum_expected_prev[5] )
		&& ((new_sum_expected_prev[5] !== last_new_sum_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port new_sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", new_sum_expected_prev);
		$display ("     Real value = %b", new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_new_sum_exp[5] = new_sum_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g07_testing_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] new_card;
reg [5:0] old_sum;
// wires                                               
wire legal_play;
wire [5:0] new_sum;

wire sampler;                             

// assign statements (if any)                          
g07_testing i1 (
// port map - connection between master ports and signals/registers   
	.legal_play(legal_play),
	.new_card(new_card),
	.new_sum(new_sum),
	.old_sum(old_sum)
);
// new_card[ 5 ]
initial
begin
	new_card[5] = 1'b0;
end 
// new_card[ 4 ]
initial
begin
	new_card[4] = 1'b0;
	new_card[4] = #1600000 1'b1;
end 
// new_card[ 3 ]
initial
begin
	new_card[3] = 1'b0;
	new_card[3] = #800000 1'b1;
	new_card[3] = #800000 1'b0;
	new_card[3] = #800000 1'b1;
end 
// new_card[ 2 ]
initial
begin
	repeat(3)
	begin
		new_card[2] = 1'b0;
		new_card[2] = #400000 1'b1;
		# 400000;
	end
	new_card[2] = 1'b0;
	new_card[2] = #400000 1'b1;
end 
// new_card[ 1 ]
initial
begin
	repeat(7)
	begin
		new_card[1] = 1'b0;
		new_card[1] = #200000 1'b1;
		# 200000;
	end
	new_card[1] = 1'b0;
end 
// new_card[ 0 ]
always
begin
	new_card[0] = 1'b0;
	new_card[0] = #100000 1'b1;
	#100000;
end 
// old_sum[ 5 ]
initial
begin
	old_sum[5] = 1'b1;
	old_sum[5] = #2440000 1'b0;
end 
// old_sum[ 4 ]
initial
begin
	old_sum[4] = 1'b0;
end 
// old_sum[ 3 ]
initial
begin
	old_sum[3] = 1'b1;
end 
// old_sum[ 2 ]
initial
begin
	old_sum[2] = 1'b1;
	old_sum[2] = #2440000 1'b0;
end 
// old_sum[ 1 ]
initial
begin
	old_sum[1] = 1'b1;
	old_sum[1] = #2440000 1'b0;
end 
// old_sum[ 0 ]
initial
begin
	old_sum[0] = 1'b1;
	old_sum[0] = #2440000 1'b0;
	old_sum[0] = #260000 1'b1;
end 

g07_testing_vlg_sample_tst tb_sample (
	.new_card(new_card),
	.old_sum(old_sum),
	.sampler_tx(sampler)
);

g07_testing_vlg_check_tst tb_out(
	.legal_play(legal_play),
	.new_sum(new_sum),
	.sampler_rx(sampler)
);
endmodule

