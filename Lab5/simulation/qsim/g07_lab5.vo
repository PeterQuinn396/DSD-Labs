// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.0 Build 156 04/24/2013 SJ Web Edition"

// DATE "11/27/2017 18:12:55"

// 
// Device: Altera EP2C20F484C7 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module g07_lab5_testbed (
	deal,
	request_deal,
	reset,
	clk,
	legal_play,
	p_new_sum,
	en_p,
	p_sum);
output 	deal;
input 	request_deal;
input 	reset;
input 	clk;
output 	legal_play;
output 	[5:0] p_new_sum;
input 	en_p;
output 	[5:0] p_sum;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \clk~combout ;
wire \request_deal~combout ;
wire \inst1|Selector0~0_combout ;
wire \reset~combout ;
wire \inst1|state.WAIT_LOW~regout ;
wire \inst1|Selector1~0_combout ;
wire \inst1|state.WAIT_HIGH~regout ;
wire \inst1|Selector2~0_combout ;
wire \inst1|state.ENABLE_STACK~regout ;
wire \en_p~combout ;
wire \inst|Add1~2_combout ;
wire \inst|Add1~0_combout ;
wire \inst|new_sum_int~2_combout ;
wire \inst|new_sum_int~1_combout ;
wire \inst|Add1~1_combout ;
wire \inst|new_sum_int~0_combout ;
wire [5:0] \inst2|dffs ;
wire [4:0] \inst|old_sum_int ;
wire [5:0] \inst|new_sum_int ;
wire [5:0] \inst|test_new_sum_int ;
wire [5:0] \inst|old_sum ;
wire [3:0] \inst|new_card_value_int ;
wire [3:0] \inst|new_card_value_int_raw ;


cycloneii_io \clk~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\clk~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(clk));
// synopsys translate_off
defparam \clk~I .input_async_reset = "none";
defparam \clk~I .input_power_up = "low";
defparam \clk~I .input_register_mode = "none";
defparam \clk~I .input_sync_reset = "none";
defparam \clk~I .oe_async_reset = "none";
defparam \clk~I .oe_power_up = "low";
defparam \clk~I .oe_register_mode = "none";
defparam \clk~I .oe_sync_reset = "none";
defparam \clk~I .operation_mode = "input";
defparam \clk~I .output_async_reset = "none";
defparam \clk~I .output_power_up = "low";
defparam \clk~I .output_register_mode = "none";
defparam \clk~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \request_deal~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\request_deal~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(request_deal));
// synopsys translate_off
defparam \request_deal~I .input_async_reset = "none";
defparam \request_deal~I .input_power_up = "low";
defparam \request_deal~I .input_register_mode = "none";
defparam \request_deal~I .input_sync_reset = "none";
defparam \request_deal~I .oe_async_reset = "none";
defparam \request_deal~I .oe_power_up = "low";
defparam \request_deal~I .oe_register_mode = "none";
defparam \request_deal~I .oe_sync_reset = "none";
defparam \request_deal~I .operation_mode = "input";
defparam \request_deal~I .output_async_reset = "none";
defparam \request_deal~I .output_power_up = "low";
defparam \request_deal~I .output_register_mode = "none";
defparam \request_deal~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_comb \inst1|Selector0~0 (
// Equation(s):
// \inst1|Selector0~0_combout  = (!\inst1|state.ENABLE_STACK~regout  & ((\inst1|state.WAIT_LOW~regout ) # (!\request_deal~combout )))

	.dataa(\inst1|state.ENABLE_STACK~regout ),
	.datab(\request_deal~combout ),
	.datac(vcc),
	.datad(\inst1|state.WAIT_LOW~regout ),
	.cin(gnd),
	.combout(\inst1|Selector0~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|Selector0~0 .lut_mask = 16'h5511;
defparam \inst1|Selector0~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_io \reset~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\reset~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(reset));
// synopsys translate_off
defparam \reset~I .input_async_reset = "none";
defparam \reset~I .input_power_up = "low";
defparam \reset~I .input_register_mode = "none";
defparam \reset~I .input_sync_reset = "none";
defparam \reset~I .oe_async_reset = "none";
defparam \reset~I .oe_power_up = "low";
defparam \reset~I .oe_register_mode = "none";
defparam \reset~I .oe_sync_reset = "none";
defparam \reset~I .operation_mode = "input";
defparam \reset~I .output_async_reset = "none";
defparam \reset~I .output_power_up = "low";
defparam \reset~I .output_register_mode = "none";
defparam \reset~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_ff \inst1|state.WAIT_LOW (
	.clk(\clk~combout ),
	.datain(\inst1|Selector0~0_combout ),
	.sdata(gnd),
	.aclr(\reset~combout ),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst1|state.WAIT_LOW~regout ));

cycloneii_lcell_comb \inst1|Selector1~0 (
// Equation(s):
// \inst1|Selector1~0_combout  = (!\request_deal~combout  & ((\inst1|state.WAIT_HIGH~regout ) # (!\inst1|state.WAIT_LOW~regout )))

	.dataa(\inst1|state.WAIT_HIGH~regout ),
	.datab(vcc),
	.datac(\inst1|state.WAIT_LOW~regout ),
	.datad(\request_deal~combout ),
	.cin(gnd),
	.combout(\inst1|Selector1~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|Selector1~0 .lut_mask = 16'h00AF;
defparam \inst1|Selector1~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst1|state.WAIT_HIGH (
	.clk(\clk~combout ),
	.datain(\inst1|Selector1~0_combout ),
	.sdata(gnd),
	.aclr(\reset~combout ),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst1|state.WAIT_HIGH~regout ));

cycloneii_lcell_comb \inst1|Selector2~0 (
// Equation(s):
// \inst1|Selector2~0_combout  = (\request_deal~combout  & \inst1|state.WAIT_HIGH~regout )

	.dataa(\request_deal~combout ),
	.datab(\inst1|state.WAIT_HIGH~regout ),
	.datac(vcc),
	.datad(vcc),
	.cin(gnd),
	.combout(\inst1|Selector2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|Selector2~0 .lut_mask = 16'h8888;
defparam \inst1|Selector2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst1|state.ENABLE_STACK (
	.clk(\clk~combout ),
	.datain(\inst1|Selector2~0_combout ),
	.sdata(gnd),
	.aclr(\reset~combout ),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst1|state.ENABLE_STACK~regout ));

cycloneii_io \en_p~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\en_p~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(en_p));
// synopsys translate_off
defparam \en_p~I .input_async_reset = "none";
defparam \en_p~I .input_power_up = "low";
defparam \en_p~I .input_register_mode = "none";
defparam \en_p~I .input_sync_reset = "none";
defparam \en_p~I .oe_async_reset = "none";
defparam \en_p~I .oe_power_up = "low";
defparam \en_p~I .oe_register_mode = "none";
defparam \en_p~I .oe_sync_reset = "none";
defparam \en_p~I .operation_mode = "input";
defparam \en_p~I .output_async_reset = "none";
defparam \en_p~I .output_power_up = "low";
defparam \en_p~I .output_register_mode = "none";
defparam \en_p~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_ff \inst|new_card_value_int_raw[3] (
	.clk(\clk~combout ),
	.datain(vcc),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|new_card_value_int_raw [3]));

cycloneii_lcell_ff \inst|new_card_value_int[3] (
	.clk(\clk~combout ),
	.datain(\inst|new_card_value_int_raw [3]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|new_card_value_int [3]));

cycloneii_lcell_comb \inst|Add1~2 (
// Equation(s):
// \inst|Add1~2_combout  = \inst|new_card_value_int [3] $ (\inst|old_sum_int [3])

	.dataa(vcc),
	.datab(vcc),
	.datac(\inst|new_card_value_int [3]),
	.datad(\inst|old_sum_int [3]),
	.cin(gnd),
	.combout(\inst|Add1~2_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Add1~2 .lut_mask = 16'h0FF0;
defparam \inst|Add1~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst|test_new_sum_int[3] (
	.clk(\clk~combout ),
	.datain(\inst|Add1~2_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|test_new_sum_int [3]));

cycloneii_lcell_ff \inst2|dffs[4] (
	.clk(\clk~combout ),
	.datain(\inst|new_sum_int [4]),
	.sdata(gnd),
	.aclr(\reset~combout ),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst2|dffs [4]));

cycloneii_lcell_ff \inst|old_sum[4] (
	.clk(\clk~combout ),
	.datain(\inst2|dffs [4]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|old_sum [4]));

cycloneii_lcell_ff \inst|old_sum_int[4] (
	.clk(\clk~combout ),
	.datain(\inst|old_sum [4]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|old_sum_int [4]));

cycloneii_lcell_comb \inst|Add1~0 (
// Equation(s):
// \inst|Add1~0_combout  = \inst|old_sum_int [4] $ (((\inst|new_card_value_int [3] & \inst|old_sum_int [3])))

	.dataa(vcc),
	.datab(\inst|old_sum_int [4]),
	.datac(\inst|new_card_value_int [3]),
	.datad(\inst|old_sum_int [3]),
	.cin(gnd),
	.combout(\inst|Add1~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Add1~0 .lut_mask = 16'h3CCC;
defparam \inst|Add1~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst|test_new_sum_int[4] (
	.clk(\clk~combout ),
	.datain(\inst|Add1~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|test_new_sum_int [4]));

cycloneii_lcell_comb \inst|new_sum_int~2 (
// Equation(s):
// \inst|new_sum_int~2_combout  = (\inst|test_new_sum_int [5]) # ((\inst|test_new_sum_int [0]) # ((\inst|test_new_sum_int [4] & \inst|test_new_sum_int [3])))

	.dataa(\inst|test_new_sum_int [5]),
	.datab(\inst|test_new_sum_int [0]),
	.datac(\inst|test_new_sum_int [4]),
	.datad(\inst|test_new_sum_int [3]),
	.cin(gnd),
	.combout(\inst|new_sum_int~2_combout ),
	.cout());
// synopsys translate_off
defparam \inst|new_sum_int~2 .lut_mask = 16'hFEEE;
defparam \inst|new_sum_int~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst|new_sum_int[0] (
	.clk(\clk~combout ),
	.datain(\inst|new_sum_int~2_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|new_sum_int [0]));

cycloneii_lcell_ff \inst2|dffs[0] (
	.clk(\clk~combout ),
	.datain(\inst|new_sum_int [0]),
	.sdata(gnd),
	.aclr(\reset~combout ),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst2|dffs [0]));

cycloneii_lcell_ff \inst|old_sum[0] (
	.clk(\clk~combout ),
	.datain(\inst2|dffs [0]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|old_sum [0]));

cycloneii_lcell_ff \inst|old_sum_int[0] (
	.clk(\clk~combout ),
	.datain(\inst|old_sum [0]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|old_sum_int [0]));

cycloneii_lcell_ff \inst|test_new_sum_int[0] (
	.clk(\clk~combout ),
	.datain(\inst|old_sum_int [0]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|test_new_sum_int [0]));

cycloneii_lcell_comb \inst|new_sum_int~1 (
// Equation(s):
// \inst|new_sum_int~1_combout  = (\inst|test_new_sum_int [5]) # ((\inst|test_new_sum_int [3]) # ((\inst|test_new_sum_int [4] & \inst|test_new_sum_int [0])))

	.dataa(\inst|test_new_sum_int [5]),
	.datab(\inst|test_new_sum_int [3]),
	.datac(\inst|test_new_sum_int [4]),
	.datad(\inst|test_new_sum_int [0]),
	.cin(gnd),
	.combout(\inst|new_sum_int~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst|new_sum_int~1 .lut_mask = 16'hFEEE;
defparam \inst|new_sum_int~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst|new_sum_int[3] (
	.clk(\clk~combout ),
	.datain(\inst|new_sum_int~1_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|new_sum_int [3]));

cycloneii_lcell_ff \inst2|dffs[3] (
	.clk(\clk~combout ),
	.datain(\inst|new_sum_int [3]),
	.sdata(gnd),
	.aclr(\reset~combout ),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst2|dffs [3]));

cycloneii_lcell_ff \inst|old_sum[3] (
	.clk(\clk~combout ),
	.datain(\inst2|dffs [3]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|old_sum [3]));

cycloneii_lcell_ff \inst|old_sum_int[3] (
	.clk(\clk~combout ),
	.datain(\inst|old_sum [3]),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|old_sum_int [3]));

cycloneii_lcell_comb \inst|Add1~1 (
// Equation(s):
// \inst|Add1~1_combout  = (\inst|old_sum_int [4] & (\inst|new_card_value_int [3] & \inst|old_sum_int [3]))

	.dataa(\inst|old_sum_int [4]),
	.datab(\inst|new_card_value_int [3]),
	.datac(\inst|old_sum_int [3]),
	.datad(vcc),
	.cin(gnd),
	.combout(\inst|Add1~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Add1~1 .lut_mask = 16'h8080;
defparam \inst|Add1~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst|test_new_sum_int[5] (
	.clk(\clk~combout ),
	.datain(\inst|Add1~1_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|test_new_sum_int [5]));

cycloneii_lcell_comb \inst|new_sum_int~0 (
// Equation(s):
// \inst|new_sum_int~0_combout  = (\inst|test_new_sum_int [4]) # (\inst|test_new_sum_int [5])

	.dataa(\inst|test_new_sum_int [4]),
	.datab(\inst|test_new_sum_int [5]),
	.datac(vcc),
	.datad(vcc),
	.cin(gnd),
	.combout(\inst|new_sum_int~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|new_sum_int~0 .lut_mask = 16'hEEEE;
defparam \inst|new_sum_int~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \inst|new_sum_int[4] (
	.clk(\clk~combout ),
	.datain(\inst|new_sum_int~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\en_p~combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\inst|new_sum_int [4]));

cycloneii_io \deal~I (
	.datain(\inst1|state.ENABLE_STACK~regout ),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(deal));
// synopsys translate_off
defparam \deal~I .input_async_reset = "none";
defparam \deal~I .input_power_up = "low";
defparam \deal~I .input_register_mode = "none";
defparam \deal~I .input_sync_reset = "none";
defparam \deal~I .oe_async_reset = "none";
defparam \deal~I .oe_power_up = "low";
defparam \deal~I .oe_register_mode = "none";
defparam \deal~I .oe_sync_reset = "none";
defparam \deal~I .operation_mode = "output";
defparam \deal~I .output_async_reset = "none";
defparam \deal~I .output_power_up = "low";
defparam \deal~I .output_register_mode = "none";
defparam \deal~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \legal_play~I (
	.datain(gnd),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(legal_play));
// synopsys translate_off
defparam \legal_play~I .input_async_reset = "none";
defparam \legal_play~I .input_power_up = "low";
defparam \legal_play~I .input_register_mode = "none";
defparam \legal_play~I .input_sync_reset = "none";
defparam \legal_play~I .oe_async_reset = "none";
defparam \legal_play~I .oe_power_up = "low";
defparam \legal_play~I .oe_register_mode = "none";
defparam \legal_play~I .oe_sync_reset = "none";
defparam \legal_play~I .operation_mode = "output";
defparam \legal_play~I .output_async_reset = "none";
defparam \legal_play~I .output_power_up = "low";
defparam \legal_play~I .output_register_mode = "none";
defparam \legal_play~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_new_sum[5]~I (
	.datain(gnd),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_new_sum[5]));
// synopsys translate_off
defparam \p_new_sum[5]~I .input_async_reset = "none";
defparam \p_new_sum[5]~I .input_power_up = "low";
defparam \p_new_sum[5]~I .input_register_mode = "none";
defparam \p_new_sum[5]~I .input_sync_reset = "none";
defparam \p_new_sum[5]~I .oe_async_reset = "none";
defparam \p_new_sum[5]~I .oe_power_up = "low";
defparam \p_new_sum[5]~I .oe_register_mode = "none";
defparam \p_new_sum[5]~I .oe_sync_reset = "none";
defparam \p_new_sum[5]~I .operation_mode = "output";
defparam \p_new_sum[5]~I .output_async_reset = "none";
defparam \p_new_sum[5]~I .output_power_up = "low";
defparam \p_new_sum[5]~I .output_register_mode = "none";
defparam \p_new_sum[5]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_new_sum[4]~I (
	.datain(\inst|new_sum_int [4]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_new_sum[4]));
// synopsys translate_off
defparam \p_new_sum[4]~I .input_async_reset = "none";
defparam \p_new_sum[4]~I .input_power_up = "low";
defparam \p_new_sum[4]~I .input_register_mode = "none";
defparam \p_new_sum[4]~I .input_sync_reset = "none";
defparam \p_new_sum[4]~I .oe_async_reset = "none";
defparam \p_new_sum[4]~I .oe_power_up = "low";
defparam \p_new_sum[4]~I .oe_register_mode = "none";
defparam \p_new_sum[4]~I .oe_sync_reset = "none";
defparam \p_new_sum[4]~I .operation_mode = "output";
defparam \p_new_sum[4]~I .output_async_reset = "none";
defparam \p_new_sum[4]~I .output_power_up = "low";
defparam \p_new_sum[4]~I .output_register_mode = "none";
defparam \p_new_sum[4]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_new_sum[3]~I (
	.datain(\inst|new_sum_int [3]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_new_sum[3]));
// synopsys translate_off
defparam \p_new_sum[3]~I .input_async_reset = "none";
defparam \p_new_sum[3]~I .input_power_up = "low";
defparam \p_new_sum[3]~I .input_register_mode = "none";
defparam \p_new_sum[3]~I .input_sync_reset = "none";
defparam \p_new_sum[3]~I .oe_async_reset = "none";
defparam \p_new_sum[3]~I .oe_power_up = "low";
defparam \p_new_sum[3]~I .oe_register_mode = "none";
defparam \p_new_sum[3]~I .oe_sync_reset = "none";
defparam \p_new_sum[3]~I .operation_mode = "output";
defparam \p_new_sum[3]~I .output_async_reset = "none";
defparam \p_new_sum[3]~I .output_power_up = "low";
defparam \p_new_sum[3]~I .output_register_mode = "none";
defparam \p_new_sum[3]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_new_sum[2]~I (
	.datain(\inst|new_sum_int [0]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_new_sum[2]));
// synopsys translate_off
defparam \p_new_sum[2]~I .input_async_reset = "none";
defparam \p_new_sum[2]~I .input_power_up = "low";
defparam \p_new_sum[2]~I .input_register_mode = "none";
defparam \p_new_sum[2]~I .input_sync_reset = "none";
defparam \p_new_sum[2]~I .oe_async_reset = "none";
defparam \p_new_sum[2]~I .oe_power_up = "low";
defparam \p_new_sum[2]~I .oe_register_mode = "none";
defparam \p_new_sum[2]~I .oe_sync_reset = "none";
defparam \p_new_sum[2]~I .operation_mode = "output";
defparam \p_new_sum[2]~I .output_async_reset = "none";
defparam \p_new_sum[2]~I .output_power_up = "low";
defparam \p_new_sum[2]~I .output_register_mode = "none";
defparam \p_new_sum[2]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_new_sum[1]~I (
	.datain(\inst|new_sum_int [0]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_new_sum[1]));
// synopsys translate_off
defparam \p_new_sum[1]~I .input_async_reset = "none";
defparam \p_new_sum[1]~I .input_power_up = "low";
defparam \p_new_sum[1]~I .input_register_mode = "none";
defparam \p_new_sum[1]~I .input_sync_reset = "none";
defparam \p_new_sum[1]~I .oe_async_reset = "none";
defparam \p_new_sum[1]~I .oe_power_up = "low";
defparam \p_new_sum[1]~I .oe_register_mode = "none";
defparam \p_new_sum[1]~I .oe_sync_reset = "none";
defparam \p_new_sum[1]~I .operation_mode = "output";
defparam \p_new_sum[1]~I .output_async_reset = "none";
defparam \p_new_sum[1]~I .output_power_up = "low";
defparam \p_new_sum[1]~I .output_register_mode = "none";
defparam \p_new_sum[1]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_new_sum[0]~I (
	.datain(\inst|new_sum_int [0]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_new_sum[0]));
// synopsys translate_off
defparam \p_new_sum[0]~I .input_async_reset = "none";
defparam \p_new_sum[0]~I .input_power_up = "low";
defparam \p_new_sum[0]~I .input_register_mode = "none";
defparam \p_new_sum[0]~I .input_sync_reset = "none";
defparam \p_new_sum[0]~I .oe_async_reset = "none";
defparam \p_new_sum[0]~I .oe_power_up = "low";
defparam \p_new_sum[0]~I .oe_register_mode = "none";
defparam \p_new_sum[0]~I .oe_sync_reset = "none";
defparam \p_new_sum[0]~I .operation_mode = "output";
defparam \p_new_sum[0]~I .output_async_reset = "none";
defparam \p_new_sum[0]~I .output_power_up = "low";
defparam \p_new_sum[0]~I .output_register_mode = "none";
defparam \p_new_sum[0]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_sum[5]~I (
	.datain(gnd),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_sum[5]));
// synopsys translate_off
defparam \p_sum[5]~I .input_async_reset = "none";
defparam \p_sum[5]~I .input_power_up = "low";
defparam \p_sum[5]~I .input_register_mode = "none";
defparam \p_sum[5]~I .input_sync_reset = "none";
defparam \p_sum[5]~I .oe_async_reset = "none";
defparam \p_sum[5]~I .oe_power_up = "low";
defparam \p_sum[5]~I .oe_register_mode = "none";
defparam \p_sum[5]~I .oe_sync_reset = "none";
defparam \p_sum[5]~I .operation_mode = "output";
defparam \p_sum[5]~I .output_async_reset = "none";
defparam \p_sum[5]~I .output_power_up = "low";
defparam \p_sum[5]~I .output_register_mode = "none";
defparam \p_sum[5]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_sum[4]~I (
	.datain(\inst2|dffs [4]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_sum[4]));
// synopsys translate_off
defparam \p_sum[4]~I .input_async_reset = "none";
defparam \p_sum[4]~I .input_power_up = "low";
defparam \p_sum[4]~I .input_register_mode = "none";
defparam \p_sum[4]~I .input_sync_reset = "none";
defparam \p_sum[4]~I .oe_async_reset = "none";
defparam \p_sum[4]~I .oe_power_up = "low";
defparam \p_sum[4]~I .oe_register_mode = "none";
defparam \p_sum[4]~I .oe_sync_reset = "none";
defparam \p_sum[4]~I .operation_mode = "output";
defparam \p_sum[4]~I .output_async_reset = "none";
defparam \p_sum[4]~I .output_power_up = "low";
defparam \p_sum[4]~I .output_register_mode = "none";
defparam \p_sum[4]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_sum[3]~I (
	.datain(\inst2|dffs [3]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_sum[3]));
// synopsys translate_off
defparam \p_sum[3]~I .input_async_reset = "none";
defparam \p_sum[3]~I .input_power_up = "low";
defparam \p_sum[3]~I .input_register_mode = "none";
defparam \p_sum[3]~I .input_sync_reset = "none";
defparam \p_sum[3]~I .oe_async_reset = "none";
defparam \p_sum[3]~I .oe_power_up = "low";
defparam \p_sum[3]~I .oe_register_mode = "none";
defparam \p_sum[3]~I .oe_sync_reset = "none";
defparam \p_sum[3]~I .operation_mode = "output";
defparam \p_sum[3]~I .output_async_reset = "none";
defparam \p_sum[3]~I .output_power_up = "low";
defparam \p_sum[3]~I .output_register_mode = "none";
defparam \p_sum[3]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_sum[2]~I (
	.datain(\inst2|dffs [0]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_sum[2]));
// synopsys translate_off
defparam \p_sum[2]~I .input_async_reset = "none";
defparam \p_sum[2]~I .input_power_up = "low";
defparam \p_sum[2]~I .input_register_mode = "none";
defparam \p_sum[2]~I .input_sync_reset = "none";
defparam \p_sum[2]~I .oe_async_reset = "none";
defparam \p_sum[2]~I .oe_power_up = "low";
defparam \p_sum[2]~I .oe_register_mode = "none";
defparam \p_sum[2]~I .oe_sync_reset = "none";
defparam \p_sum[2]~I .operation_mode = "output";
defparam \p_sum[2]~I .output_async_reset = "none";
defparam \p_sum[2]~I .output_power_up = "low";
defparam \p_sum[2]~I .output_register_mode = "none";
defparam \p_sum[2]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_sum[1]~I (
	.datain(\inst2|dffs [0]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_sum[1]));
// synopsys translate_off
defparam \p_sum[1]~I .input_async_reset = "none";
defparam \p_sum[1]~I .input_power_up = "low";
defparam \p_sum[1]~I .input_register_mode = "none";
defparam \p_sum[1]~I .input_sync_reset = "none";
defparam \p_sum[1]~I .oe_async_reset = "none";
defparam \p_sum[1]~I .oe_power_up = "low";
defparam \p_sum[1]~I .oe_register_mode = "none";
defparam \p_sum[1]~I .oe_sync_reset = "none";
defparam \p_sum[1]~I .operation_mode = "output";
defparam \p_sum[1]~I .output_async_reset = "none";
defparam \p_sum[1]~I .output_power_up = "low";
defparam \p_sum[1]~I .output_register_mode = "none";
defparam \p_sum[1]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \p_sum[0]~I (
	.datain(\inst2|dffs [0]),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(p_sum[0]));
// synopsys translate_off
defparam \p_sum[0]~I .input_async_reset = "none";
defparam \p_sum[0]~I .input_power_up = "low";
defparam \p_sum[0]~I .input_register_mode = "none";
defparam \p_sum[0]~I .input_sync_reset = "none";
defparam \p_sum[0]~I .oe_async_reset = "none";
defparam \p_sum[0]~I .oe_power_up = "low";
defparam \p_sum[0]~I .oe_register_mode = "none";
defparam \p_sum[0]~I .oe_sync_reset = "none";
defparam \p_sum[0]~I .operation_mode = "output";
defparam \p_sum[0]~I .output_async_reset = "none";
defparam \p_sum[0]~I .output_power_up = "low";
defparam \p_sum[0]~I .output_register_mode = "none";
defparam \p_sum[0]~I .output_sync_reset = "none";
// synopsys translate_on

endmodule
