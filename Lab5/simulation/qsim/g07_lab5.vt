// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2017 18:12:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g07_lab5_testbed
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g07_lab5_testbed_vlg_sample_tst(
	clk,
	en_p,
	request_deal,
	reset,
	sampler_tx
);
input  clk;
input  en_p;
input  request_deal;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or en_p or request_deal or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g07_lab5_testbed_vlg_check_tst (
	deal,
	legal_play,
	p_new_sum,
	p_sum,
	sampler_rx
);
input  deal;
input  legal_play;
input [5:0] p_new_sum;
input [5:0] p_sum;
input sampler_rx;

reg  deal_expected;
reg  legal_play_expected;
reg [5:0] p_new_sum_expected;
reg [5:0] p_sum_expected;

reg  deal_prev;
reg  legal_play_prev;
reg [5:0] p_new_sum_prev;
reg [5:0] p_sum_prev;

reg  legal_play_expected_prev;
reg [5:0] p_new_sum_expected_prev;
reg [5:0] p_sum_expected_prev;

reg  last_legal_play_exp;
reg [5:0] last_p_new_sum_exp;
reg [5:0] last_p_sum_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	deal_prev = deal;
	legal_play_prev = legal_play;
	p_new_sum_prev = p_new_sum;
	p_sum_prev = p_sum;
end

// update expected /o prevs

always @(trigger)
begin
	legal_play_expected_prev = legal_play_expected;
	p_new_sum_expected_prev = p_new_sum_expected;
	p_sum_expected_prev = p_sum_expected;
end



// expected legal_play
initial
begin
	legal_play_expected = 1'bX;
end 
// expected p_sum[ 5 ]
initial
begin
	p_sum_expected[5] = 1'b0;
end 
// expected p_sum[ 4 ]
initial
begin
	p_sum_expected[4] = 1'b0;
end 
// expected p_sum[ 3 ]
initial
begin
	p_sum_expected[3] = 1'b0;
end 
// expected p_sum[ 2 ]
initial
begin
	p_sum_expected[2] = 1'b0;
end 
// expected p_sum[ 1 ]
initial
begin
	p_sum_expected[1] = 1'b0;
end 
// expected p_sum[ 0 ]
initial
begin
	p_sum_expected[0] = 1'b0;
end 
// expected p_new_sum[ 5 ]
initial
begin
	p_new_sum_expected[5] = 1'bX;
end 
// expected p_new_sum[ 4 ]
initial
begin
	p_new_sum_expected[4] = 1'bX;
end 
// expected p_new_sum[ 3 ]
initial
begin
	p_new_sum_expected[3] = 1'bX;
end 
// expected p_new_sum[ 2 ]
initial
begin
	p_new_sum_expected[2] = 1'bX;
end 
// expected p_new_sum[ 1 ]
initial
begin
	p_new_sum_expected[1] = 1'bX;
end 
// expected p_new_sum[ 0 ]
initial
begin
	p_new_sum_expected[0] = 1'bX;
end 
// generate trigger
always @(deal_expected or deal or legal_play_expected or legal_play or p_new_sum_expected or p_new_sum or p_sum_expected or p_sum)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected deal = %b | expected legal_play = %b | expected p_new_sum = %b | expected p_sum = %b | ",deal_expected_prev,legal_play_expected_prev,p_new_sum_expected_prev,p_sum_expected_prev);
	$display("| real deal = %b | real legal_play = %b | real p_new_sum = %b | real p_sum = %b | ",deal_prev,legal_play_prev,p_new_sum_prev,p_sum_prev);
`endif
	if (
		( legal_play_expected_prev !== 1'bx ) && ( legal_play_prev !== legal_play_expected_prev )
		&& ((legal_play_expected_prev !== last_legal_play_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port legal_play :: @time = %t",  $realtime);
		$display ("     Expected value = %b", legal_play_expected_prev);
		$display ("     Real value = %b", legal_play_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_legal_play_exp = legal_play_expected_prev;
	end
	if (
		( p_new_sum_expected_prev[0] !== 1'bx ) && ( p_new_sum_prev[0] !== p_new_sum_expected_prev[0] )
		&& ((p_new_sum_expected_prev[0] !== last_p_new_sum_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_new_sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_new_sum_expected_prev);
		$display ("     Real value = %b", p_new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p_new_sum_exp[0] = p_new_sum_expected_prev[0];
	end
	if (
		( p_new_sum_expected_prev[1] !== 1'bx ) && ( p_new_sum_prev[1] !== p_new_sum_expected_prev[1] )
		&& ((p_new_sum_expected_prev[1] !== last_p_new_sum_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_new_sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_new_sum_expected_prev);
		$display ("     Real value = %b", p_new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p_new_sum_exp[1] = p_new_sum_expected_prev[1];
	end
	if (
		( p_new_sum_expected_prev[2] !== 1'bx ) && ( p_new_sum_prev[2] !== p_new_sum_expected_prev[2] )
		&& ((p_new_sum_expected_prev[2] !== last_p_new_sum_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_new_sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_new_sum_expected_prev);
		$display ("     Real value = %b", p_new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p_new_sum_exp[2] = p_new_sum_expected_prev[2];
	end
	if (
		( p_new_sum_expected_prev[3] !== 1'bx ) && ( p_new_sum_prev[3] !== p_new_sum_expected_prev[3] )
		&& ((p_new_sum_expected_prev[3] !== last_p_new_sum_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_new_sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_new_sum_expected_prev);
		$display ("     Real value = %b", p_new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p_new_sum_exp[3] = p_new_sum_expected_prev[3];
	end
	if (
		( p_new_sum_expected_prev[4] !== 1'bx ) && ( p_new_sum_prev[4] !== p_new_sum_expected_prev[4] )
		&& ((p_new_sum_expected_prev[4] !== last_p_new_sum_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_new_sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_new_sum_expected_prev);
		$display ("     Real value = %b", p_new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p_new_sum_exp[4] = p_new_sum_expected_prev[4];
	end
	if (
		( p_new_sum_expected_prev[5] !== 1'bx ) && ( p_new_sum_prev[5] !== p_new_sum_expected_prev[5] )
		&& ((p_new_sum_expected_prev[5] !== last_p_new_sum_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_new_sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_new_sum_expected_prev);
		$display ("     Real value = %b", p_new_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p_new_sum_exp[5] = p_new_sum_expected_prev[5];
	end
	if (
		( p_sum_expected_prev[0] !== 1'bx ) && ( p_sum_prev[0] !== p_sum_expected_prev[0] )
		&& ((p_sum_expected_prev[0] !== last_p_sum_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p_sum_exp[0] = p_sum_expected_prev[0];
	end
	if (
		( p_sum_expected_prev[1] !== 1'bx ) && ( p_sum_prev[1] !== p_sum_expected_prev[1] )
		&& ((p_sum_expected_prev[1] !== last_p_sum_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p_sum_exp[1] = p_sum_expected_prev[1];
	end
	if (
		( p_sum_expected_prev[2] !== 1'bx ) && ( p_sum_prev[2] !== p_sum_expected_prev[2] )
		&& ((p_sum_expected_prev[2] !== last_p_sum_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p_sum_exp[2] = p_sum_expected_prev[2];
	end
	if (
		( p_sum_expected_prev[3] !== 1'bx ) && ( p_sum_prev[3] !== p_sum_expected_prev[3] )
		&& ((p_sum_expected_prev[3] !== last_p_sum_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p_sum_exp[3] = p_sum_expected_prev[3];
	end
	if (
		( p_sum_expected_prev[4] !== 1'bx ) && ( p_sum_prev[4] !== p_sum_expected_prev[4] )
		&& ((p_sum_expected_prev[4] !== last_p_sum_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p_sum_exp[4] = p_sum_expected_prev[4];
	end
	if (
		( p_sum_expected_prev[5] !== 1'bx ) && ( p_sum_prev[5] !== p_sum_expected_prev[5] )
		&& ((p_sum_expected_prev[5] !== last_p_sum_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_sum_expected_prev);
		$display ("     Real value = %b", p_sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p_sum_exp[5] = p_sum_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g07_lab5_testbed_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg en_p;
reg request_deal;
reg reset;
// wires                                               
wire deal;
wire legal_play;
wire [5:0] p_new_sum;
wire [5:0] p_sum;

wire sampler;                             

// assign statements (if any)                          
g07_lab5_testbed i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.deal(deal),
	.en_p(en_p),
	.legal_play(legal_play),
	.p_new_sum(p_new_sum),
	.p_sum(p_sum),
	.request_deal(request_deal),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// en_p
initial
begin
	en_p = 1'b1;
	en_p = #800000 1'b0;
end 

g07_lab5_testbed_vlg_sample_tst tb_sample (
	.clk(clk),
	.en_p(en_p),
	.request_deal(request_deal),
	.reset(reset),
	.sampler_tx(sampler)
);

g07_lab5_testbed_vlg_check_tst tb_out(
	.deal(deal),
	.legal_play(legal_play),
	.p_new_sum(p_new_sum),
	.p_sum(p_sum),
	.sampler_rx(sampler)
);
endmodule

